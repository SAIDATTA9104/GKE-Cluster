variable "gcp_project_id" {
  type        = string
  description = "The GCP project ID."
}

variable "gcp_region" {
  type        = string
  description = "The GCP region for resources."
  default     = "us-central1"
}

variable "artifact_repo_name" {
  type        = string
  description = "The name for the Artifact Registry repository."
  default     = "oci-report-repo"
}

---------------
# Create the Artifact Registry Docker repository
resource "google_artifact_registry_repository" "repo" {
  project       = var.gcp_project_id
  location      = var.gcp_region
  repository_id = var.artifact_repo_name
  description   = "Docker repository for OCI reports"
  format        = "DOCKER"
}

# Output the repository URL for use in the pipeline
output "repository_url" {
  description = "The fully qualified URL of the Artifact Registry repository."
  value       = "${google_artifact_registry_repository.repo.location}-docker.pkg.dev/${google_artifact_registry_repository.repo.project}/${google_artifact_registry_repository.repo.name}"
}


-----------------

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 4.50.0"
    }
  }
}

provider "google" {
  project = var.gcp_project_id
  region  = var.gcp_region
}

--------------------

variable "gcp_project_id" {
  type        = string
  description = "The GCP project ID."
}

variable "gcp_region" {
  type        = string
  description = "The GCP region for resources."
  default     = "us-central1"
}

variable "image_url" {
  type        = string
  description = "The full URL of the Docker image to run."
  sensitive   = true # Best practice to not log the image URL and tag
}

variable "job_name" {
  type        = string
  description = "The name for the Cloud Run Job."
  default     = "daily-report-job"
}

variable "schedule_cron" {
  type        = string
  description = "Cron schedule for the job trigger."
  default     = "0 0 * * *" # 12:00 AM Daily
}

variable "schedule_timezone" {
  type        = string
  description = "Timezone for the cron schedule."
  default     = "Asia/Kolkata" # Set to India Standard Time
}

----------------

# Create the Artifact Registry Docker repository
resource "google_artifact_registry_repository" "repo" {
  project       = var.gcp_project_id
  location      = var.gcp_region
  repository_id = var.artifact_repo_name
  description   = "Docker repository for OCI reports"
  format        = "DOCKER"
}

# Output the repository URL for use in the pipeline
output "repository_url" {
  description = "The fully qualified URL of the Artifact Registry repository."
  value       = "${google_artifact_registry_repository.repo.location}-docker.pkg.dev/${google_artifact_registry_repository.repo.project}/${google_artifact_registry_repository.repo.name}"
}


------------------

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 4.50.0"
    }
  }
}

provider "google" {
  project = var.gcp_project_id
  region  = var.gcp_region
}

-------------------

variable "gcp_project_id" {
  type        = string
  description = "The GCP project ID."
}

variable "gcp_region" {
  type        = string
  description = "The GCP region for resources."
  default     = "us-central1"
}

variable "image_url" {
  type        = string
  description = "The full URL of the Docker image to run."
  sensitive   = true # Best practice to not log the image URL and tag
}

variable "job_name" {
  type        = string
  description = "The name for the Cloud Run Job."
  default     = "daily-report-job"
}

variable "schedule_cron" {
  type        = string
  description = "Cron schedule for the job trigger."
  default     = "0 0 * * *" # 12:00 AM Daily
}

variable "schedule_timezone" {
  type        = string
  description = "Timezone for the cron schedule."
  default     = "Asia/Kolkata" # Set to India Standard Time
}
-----------------

# Create a dedicated service account for the Cloud Run Job to run as
resource "google_service_account" "job_runner_sa" {
  account_id   = "report-job-runner"
  display_name = "Service Account for Report Job"
}

# Create the Cloud Run Job
resource "google_cloud_run_v2_job" "report_job" {
  name     = var.job_name
  location = var.gcp_region

  template {
    template {
      service_account = google_service_account.job_runner_sa.email
      containers {
        image = var.image_url
      }
    }
  }
}

# Create a service account for the Cloud Scheduler to use
resource "google_service_account" "scheduler_invoker_sa" {
  account_id   = "scheduler-job-invoker"
  display_name = "Service Account for Cloud Scheduler"
}

# Grant the scheduler's service account permission to run the Cloud Run Job
resource "google_cloud_run_v2_job_iam_member" "job_invoker_binding" {
  project  = google_cloud_run_v2_job.report_job.project
  location = google_cloud_run_v2_job.report_job.location
  name     = google_cloud_run_v2_job.report_job.name
  role     = "roles/run.invoker"
  member   = "serviceAccount:${google_service_account.scheduler_invoker_sa.email}"
}

# Create the Cloud Scheduler Job to run at the specified schedule
resource "google_cloud_scheduler_job" "job_scheduler" {
  name        = "trigger-${var.job_name}"
  description = "Triggers the ${var.job_name} Cloud Run Job"
  schedule    = var.schedule_cron
  time_zone   = var.schedule_timezone

  http_target {
    uri = "https://${var.gcp_region}-run.googleapis.com/v1/${google_cloud_run_v2_job.report_job.name}:run"
    http_method = "POST"
    
    oidc_token {
      service_account_email = google_service_account.scheduler_invoker_sa.email
    }
  }
}
------
ADO.yaml
---
trigger:
- main # Trigger the pipeline on commits to the main branch

variables:
  # --- PROJECT CONFIGURATION - UPDATE THESE VALUES ---
  gcpServiceConnection: 'gcp-service-connection'           # GCP Service connection for Terraform
  dockerRegistryServiceConnection: 'gcp-artifact-registry-connection' # Docker Registry service connection
  gcpProjectID: 'your-gcp-project-id'                  # Your GCP Project ID
  gcpRegion: 'us-central1'
  terraformStateBucket: 'your-unique-tfstate-bucket-name'  # GCS bucket for Terraform state
  
  # --- REPOSITORY & IMAGE CONFIGURATION ---
  artifactRepositoryName: 'oci-report-repo'
  imageName: 'daily-report'
  imageTag: '$(Build.BuildId)'

  # --- DERIVED VARIABLES ---
  # The full repository path for Docker
  imageRepository: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectID)/$(artifactRepositoryName)/$(imageName)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Provision_Registry
  displayName: '1. Provision Artifact Registry'
  jobs:
  - job: Terraform_Apply_Registry
    displayName: 'Terraform Apply (Registry)'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'gcp'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/1-artifact-registry'
        backendServiceGCP: '$(gcpServiceConnection)'
        backendGCPBucketName: '$(terraformStateBucket)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'gcp'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/1-artifact-registry'
        environmentServiceNameGCP: '$(gcpServiceConnection)'
        commandOptions: >-
          -auto-approve 
          -var="gcp_project_id=$(gcpProjectID)" 
          -var="gcp_region=$(gcpRegion)"
          -var="artifact_repo_name=$(artifactRepositoryName)"

- stage: Build_and_Push
  displayName: '2. Build and Push Docker Image'
  dependsOn: Provision_Registry
  jobs:
  - job: Build_Push_Image
    displayName: 'Build and Push to Artifact Registry'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(System.DefaultWorkingDirectory)/src/Dockerfile'
        tags: '$(imageTag)'

- stage: Deploy_Job
  displayName: '3. Deploy Cloud Run Job & Scheduler'
  dependsOn: Build_and_Push
  jobs:
  - job: Terraform_Apply_Job
    displayName: 'Terraform Apply (Cloud Run Job)'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'gcp'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/2-cloud-run-job'
        backendServiceGCP: '$(gcpServiceConnection)'
        backendGCPBucketName: '$(terraformStateBucket)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'gcp'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/2-cloud-run-job'
        environmentServiceNameGCP: '$(gcpServiceConnection)'
        commandOptions: >-
          -auto-approve
          -var="gcp_project_id=$(gcpProjectID)"
          -var="gcp_region=$(gcpRegion)"
          -var="image_url=$(imageRepository):$(imageTag)"

