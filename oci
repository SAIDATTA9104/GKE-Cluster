trigger: 
  branches:
    include:
      - alldir-yaml 

# parameters:
# - name: templateDirectory
#   type: string 
#   default: 'iam'  

variables:
- group: 'ccoe-non-prod'

variables:
  - group: 'ccoe-non-prod'
  # --- INFRASTRUCTURE & DEPLOYMENT VARIABLES ---
  - name: gcpServiceConnection
    value: '<GCP_SERVICE_CONNECTION_NAME>' # Replace with your GCP Service Connection name
  - name: gcpProjectId
    value: <>
  - name: gcpRegion
    value: 'us-central1'
  - name: artifactRepoId
    value: 'oci-report-repo'
  - name: dockerImageName
    value: 'oci-report-image'
  - name: imageTag
    value: '$(Build.BuildId)' # Use a unique build ID as the image tag
  - name: sourceDir
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: tfWorkingDir
    value: '$(System.DefaultWorkingDirectory)/iac'
  - name: scheduleCron
    value: '0 0 * * *' # Midnight UTC

  # --- RUNTIME CONFIGURATION VARIABLES (Passed to Python Script) ---
  - name: ENV_GCP_PROJECT_ID
    value: '$(gcpProjectId)'
  - name: ENV_BIGQUERY_DATASET_ID
    value: 'oci_prod_dataset'
  - name: ENV_BIGQUERY_TABLE_NAME
    value: 'daily_cost'
  - name: ENV_GCS_REPORT_BUCKET_NAME
    value: 'oci-cost-reports-bucket'
  - name: ENV_GCS_STAGING_FOLDER
    value: 'staged-reports/'
  - name: ENV_GCP_OCI_CONFIG_SECRET_ID
    value: 'oci-config-prod'
  - name: ENV_REPORT_DATE_OFFSET_DAYS
    value: '1' # Process yesterday's data

resources:
  repositories:
    - repository: templates
      type: git
      name: ccoe/tf-rxo-ccoe-infra
      ref: apply-message  

stages:
- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Docker Build and Push'
    steps:
    - task: Docker@2
      displayName: 'Log in to Artifact Registry'
      inputs:
        command: 'login'
        containerRegistry: '$(gcpServiceConnection)'
        # Uses the fully qualified registry path for login
        arguments: '$(gcpRegion)-docker.pkg.dev'

    - task: Docker@2
      displayName: 'Build and Push Image to Artifact Registry'
      inputs:
        containerRegistry: '$(gcpServiceConnection)'
        repository: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRepoId)/$(dockerImageName)'
        command: 'buildAndPush'
        Dockerfile: '$(sourceDir)/Dockerfile'
        buildContext: '$(sourceDir)' # Set context to /src folder
        tags: |
          $(imageTag)
          latest # Also push 'latest' tag for dev convenience

- stage: 'Artifact registry'
  jobs:
  - job: ArtifactRegistry
    steps:
    - script: |
        echo "Deploying Artifact registry"
  - template: jobs/terraform-plan.yml@templates
    parameters:
      environmentName: 'dev'
      TF_TOKEN: $(TF_TOKEN)
      terraformDirectory: '$(tfWorkingDir)/artifact_registry'
