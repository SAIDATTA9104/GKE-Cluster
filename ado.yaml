# This pipeline will trigger on commits to 'main' or Pull Requests targeting 'main'
# if changes are detected in any of the specified Terraform module directories.
# It will then conditionally run stages only if:
# 1. Changes are detected in the module's folder (path filter).
# 2. The commit message contains the corresponding module name (e.g., "billing module changes").

trigger:
  branches:
    include:
      - main # Trigger CI pipeline on commits to 'main'
  paths:
    include:
      - terraform/modules/compute/*
      - terraform/modules/network/*
      - terraform/modules/billing/*
      - terraform/modules/vpc/*
    exclude:
      # Optional: Exclude specific file types or subdirectories from triggering CI
      # - terraform/modules/*/docs/*
      # - terraform/modules/*/README.md

pr:
  branches:
    include:
      - main # Trigger PR pipeline for PRs targeting 'main'
  paths:
    include:
      - terraform/modules/compute/*
      - terraform/modules/network/*
      - terraform/modules/billing/*
      - terraform/modules/vpc/*
    exclude:
      # Optional: Exclude specific file types or subdirectories from triggering PR builds
      # - terraform/modules/*/docs/*
      # - terraform/modules/*/README.md

pool:
  vmImage: 'ubuntu-latest' # Or your preferred agent image

variables:
  # Define the base path for your Terraform modules
  terraformModulesPath: 'terraform/modules'
  # Capture the full commit message for the current build
  currentCommitMessage: $(Build.SourceVersionMessage)

stages:
- stage: DetectChanges
  displayName: 'Detect Changed Terraform Modules'
  jobs:
  - job: GetChangedFiles
    displayName: 'Determine Changed Modules'
    steps:
    - checkout: self # Ensure the repository is checked out

    - script: |
        echo "Determining changed files..."
        CHANGED_FILES=""

        # Determine the base for git diff based on the build reason
        if [ "$(Build.Reason)" = "PullRequest" ]; then
          # For PRs, compare against the target branch
          echo "Running git diff for Pull Request."
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMRC $(System.PullRequest.TargetBranch)..$(Build.SourceBranch))
        else
          # For other reasons (e.g., CI push), compare against the previous commit
          echo "Running git diff for CI push."
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMRC HEAD~1 HEAD)
        fi

        echo "Changed files detected:"
        echo "$CHANGED_FILES"

        # Get the commit message from the pipeline variable
        COMMIT_MSG="${{ variables.currentCommitMessage }}"
        echo "Commit Message: $COMMIT_MSG"

        # Initialize flags for path changes and message matches
        IS_COMPUTE_PATH_CHANGED="false"
        IS_NETWORK_PATH_CHANGED="false"
        IS_BILLING_PATH_CHANGED="false"
        IS_VPC_PATH_CHANGED="false"

        IS_COMPUTE_MSG_MATCH="false"
        IS_NETWORK_MSG_MATCH="false"
        IS_BILLING_MSG_MATCH="false"
        IS_VPC_MSG_MATCH="false"

        # Check for path changes
        if echo "$CHANGED_FILES" | grep -q "${{ variables.terraformModulesPath }}/compute/"; then
          IS_COMPUTE_PATH_CHANGED="true"
        fi
        if echo "$CHANGED_FILES" | grep -q "${{ variables.terraformModulesPath }}/network/"; then
          IS_NETWORK_PATH_CHANGED="true"
        fi
        if echo "$CHANGED_FILES" | grep -q "${{ variables.terraformModulesPath }}/billing/"; then
          IS_BILLING_PATH_CHANGED="true"
        fi
        if echo "$CHANGED_FILES" | grep -q "${{ variables.terraformModulesPath }}/vpc/"; then
          IS_VPC_PATH_CHANGED="true"
        fi

        # Check for commit message matches (case-insensitive for robustness)
        # The user requested "module name changes" (e.g., "billing module changes")
        if echo "$COMMIT_MSG" | grep -qi "compute module changes"; then
          IS_COMPUTE_MSG_MATCH="true"
        fi
        if echo "$COMMIT_MSG" | grep -qi "network module changes"; then
          IS_NETWORK_MSG_MATCH="true"
        fi
        if echo "$COMMIT_MSG" | grep -qi "billing module changes"; then
          IS_BILLING_MSG_MATCH="true"
        fi
        if echo "$COMMIT_MSG" | grep -qi "vpc module changes"; then
          IS_VPC_MSG_MATCH="true"
        fi

        # Combine conditions: Stage runs only if path changed AND commit message matches
        RUN_COMPUTE_STAGE="false"
        RUN_NETWORK_STAGE="false"
        RUN_BILLING_STAGE="false"
        RUN_VPC_STAGE="false"

        if [ "$IS_COMPUTE_PATH_CHANGED" = "true" ] && [ "$IS_COMPUTE_MSG_MATCH" = "true" ]; then
          RUN_COMPUTE_STAGE="true"
        fi
        if [ "$IS_NETWORK_PATH_CHANGED" = "true" ] && [ "$IS_NETWORK_MSG_MATCH" = "true" ]; then
          RUN_NETWORK_STAGE="true"
        fi
        if [ "$IS_BILLING_PATH_CHANGED" = "true" ] && [ "$IS_BILLING_MSG_MATCH" = "true" ]; then
          RUN_BILLING_STAGE="true"
        fi
        if [ "$IS_VPC_PATH_CHANGED" = "true" ] && [ "$IS_VPC_MSG_MATCH" = "true" ]; then
          RUN_VPC_STAGE="true"
        fi

        # Set output variables for subsequent stages/jobs
        echo "##vso[task.setvariable variable=runComputeStage;isOutput=true]$RUN_COMPUTE_STAGE"
        echo "##vso[task.setvariable variable=runNetworkStage;isOutput=true]$RUN_NETWORK_STAGE"
        echo "##vso[task.setvariable variable=runBillingStage;isOutput=true]$RUN_BILLING_STAGE"
        echo "##vso[task.setvariable variable=runVPCStage;isOutput=true]$RUN_VPC_STAGE"

        echo "Module change detection complete (Path AND Message):"
        echo "  Run Compute Stage: $RUN_COMPUTE_STAGE"
        echo "  Run Network Stage: $RUN_NETWORK_STAGE"
        echo "  Run Billing Stage: $RUN_BILLING_STAGE"
        echo "  Run VPC Stage: $RUN_VPC_STAGE"
      displayName: 'Set Conditional Run Flags'
      name: SetRunFlags # Name this step to reference its output variables

# --- Conditional Stages for each Terraform Module ---

- stage: ComputeModule
  displayName: 'Terraform for Compute Module'
  # Condition to run this stage only if compute module changes were detected AND commit message matches
  condition: and(succeeded(), eq(dependencies.DetectChanges.outputs['SetRunFlags.runComputeStage'], 'true'))
  jobs:
  - job: ComputePlan
    displayName: 'Compute Plan & Apply'
    steps:
    - checkout: self # Checkout repository for this job
    - script: |
        echo "Running Terraform for Compute module due to path change AND commit message match."
        cd ${{ variables.terraformModulesPath }}/compute
        terraform init -backend-config="../../../backend.tfvars" # Adjust path as needed
        terraform plan -var-file="../../../dev.tfvars" # Adjust path as needed
        # Add terraform apply steps here if desired, possibly with another condition
      displayName: 'Run Compute Terraform'

- stage: NetworkModule
  displayName: 'Terraform for Network Module'
  condition: and(succeeded(), eq(dependencies.DetectChanges.outputs['SetRunFlags.runNetworkStage'], 'true'))
  jobs:
  - job: NetworkPlan
    displayName: 'Network Plan & Apply'
    steps:
    - checkout: self
    - script: |
        echo "Running Terraform for Network module due to path change AND commit message match."
        cd ${{ variables.terraformModulesPath }}/network
        terraform init -backend-config="../../../backend.tfvars"
        terraform plan -var-file="../../../dev.tfvars"
      displayName: 'Run Network Terraform'

- stage: BillingModule
  displayName: 'Terraform for Billing Module'
  condition: and(succeeded(), eq(dependencies.DetectChanges.outputs['SetRunFlags.runBillingStage'], 'true'))
  jobs:
  - job: BillingPlan
    displayName: 'Billing Plan & Apply'
    steps:
    - checkout: self
    - script: |
        echo "Running Terraform for Billing module due to path change AND commit message match."
        cd ${{ variables.terraformModulesPath }}/billing
        terraform init -backend-config="../../../backend.tfvars"
        terraform plan -var-file="../../../dev.tfvars"
      displayName: 'Run Billing Terraform'

- stage: VPCModule
  displayName: 'Terraform for VPC Module'
  condition: and(succeeded(), eq(dependencies.DetectChanges.outputs['SetRunFlags.runVPCStage'], 'true'))
  jobs:
  - job: VPCPlan
    displayName: 'VPC Plan & Apply'
    steps:
    - checkout: self
    - script: |
        echo "Running Terraform for VPC module due to path change AND commit message match."
        cd ${{ variables.terraformModulesPath }}/vpc
        terraform init -backend-config="../../../backend.tfvars"
        terraform plan -var-file="../../../dev.tfvars"
      displayName: 'Run VPC Terraform'
