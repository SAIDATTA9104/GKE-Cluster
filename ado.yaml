trigger:
  branches:
    include:
      - alldir-yaml
  paths:
    include:
      - project/*
      - iam/*
      - network/*
      - compute/*
      - database/*

pr:
  branches:
    include:
      - alldir-yaml
  paths:
    include:
      - project/*
      - iam/*
      - network/*
      - compute/*
      - database/*

variables:
- group: 'ccoe-non-prod'

resources:
  repositories:
    - repository: templates
      type: git
      name: ccoe/tf-rxo-ccoe-infra
      ref: apply-message

# ------------------ STAGE 1: Detect Changes ------------------

stages:
- stage: DetectChanges
  displayName: 'Detect Changed Terraform Modules'
  jobs:
  - job: GetChangedFiles
    displayName: 'Determine Changed Modules'
    steps:
    - checkout: self

    - script: |
        COMMIT_MSG="$BUILD_SOURCEVERSIONMESSAGE"
        echo "Commit Message: $COMMIT_MSG"

        IS_PROJECT_MSG_MATCH="false"
        IS_IAM_MSG_MATCH="false"
        IS_COMPUTE_MSG_MATCH="false"
        IS_DATABASE_MSG_MATCH="false"

        if echo "$COMMIT_MSG" | grep -i "project module"; then IS_PROJECT_MSG_MATCH="true"; fi
        if echo "$COMMIT_MSG" | grep -i "iam module"; then IS_IAM_MSG_MATCH="true"; fi
        if echo "$COMMIT_MSG" | grep -i "compute module"; then IS_COMPUTE_MSG_MATCH="true"; fi
        if echo "$COMMIT_MSG" | grep -i "database module"; then IS_DATABASE_MSG_MATCH="true"; fi

        echo "##vso[task.setvariable variable=runProject;isOutput=true]$IS_PROJECT_MSG_MATCH"
        echo "##vso[task.setvariable variable=runIam;isOutput=true]$IS_IAM_MSG_MATCH"
        echo "##vso[task.setvariable variable=runCompute;isOutput=true]$IS_COMPUTE_MSG_MATCH"
        echo "##vso[task.setvariable variable=runDatabase;isOutput=true]$IS_DATABASE_MSG_MATCH"
      name: SetRunFlags

    outputs:
      runProject: $(SetRunFlags.runProject)
      runIam: $(SetRunFlags.runIam)
      runCompute: $(SetRunFlags.runCompute)
      runDatabase: $(SetRunFlags.runDatabase)

# ------------------ STAGE 2: Project Module ------------------

- stage: project
  dependsOn: DetectChanges
  condition: eq(dependencies.DetectChanges.outputs['GetChangedFiles.runProject'], 'true')
  jobs:
  - job: variabletest1
    steps:
    - script: |
        echo "Running project stage because runProject is true"
        echo "runProject: ${{ dependencies.DetectChanges.outputs['GetChangedFiles.runProject'] }}"

  - template: jobs/ado-publish-job.yml@templates
    parameters:
      targetPath: 'project'
      artifactName: 'project'

  - template: jobs/terraform-plan.yml@templates
    parameters:
      environmentName: 'dev'
      TF_TOKEN: $(TF_TOKEN)
      terraformDirectory: 'project'

# ------------------ STAGE 3: IAM Module ------------------

- stage: iam
  dependsOn: DetectChanges
  condition: eq(dependencies.DetectChanges.outputs['GetChangedFiles.runIam'], 'true')
  jobs:
  - job: variabletest2
    steps:
    - script: |
        echo "Running IAM stage because runIam is true"
        echo "runIam: ${{ dependencies.DetectChanges.outputs['GetChangedFiles.runIam'] }}"

  - template: jobs/ado-publish-job.yml@templates
    parameters:
      targetPath: 'iam'
      artifactName: 'iam'

  - template: jobs/terraform-plan.yml@templates
    parameters:
      environmentName: 'dev'
      TF_TOKEN: $(TF_TOKEN)
      terraformDirectory: 'iam'

# ------------------ (Optional) More Stages Can Be Added ------------------

# Similar structure can be used for compute and database modules, just ensure:
# - The step in DetectChanges sets and exports the output variable
# - You use the correct condition in each stage
